apply plugin: 'com.android.library'
//apply plugin: 'com.jakewharton.butterknife'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }
    buildTypes {//Library没有debug和release区分，运行之后都按Release
        debug {
            getGeTuiApp()
            buildConfigField "String", "SERVER_URL", "\"${loadServerUrl()}\""
        }
        release {
            getGeTuiApp()
            buildConfigField "String", "SERVER_URL", "\"${loadServerUrl()}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'

    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.supportLibraryVersion"
    compile "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"

    //ARouter --start
    compile "com.alibaba:arouter-api:$rootProject.ARouterApi"
    annotationProcessor "com.alibaba:arouter-compiler:$rootProject.ARouterCompiler"
    //--end

    //fragmentation --start
    compile "me.yokeyword:fragmentation:$rootProject.fragmentation"
    // 如果想使用SwipeBack 滑动边缘退出Fragment/Activity功能，请再添加下面的库
    compile "me.yokeyword:fragmentation-swipeback:$rootProject.fragmentationSwipeback"
    //--end

    // butterknife --start
    compile "com.jakewharton:butterknife:$rootProject.butterKnifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterKnifeCompiler"
    // --end

    // rxjava --start
    compile 'io.reactivex:rxjava:1.1.0'
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'com.tbruyelle.rxpermissions:rxpermissions:0.7.0@aar'
    compile 'com.trello:rxlifecycle:0.7.0'
    compile 'com.trello:rxlifecycle-android:0.7.0'
    compile 'com.trello:rxlifecycle-components:0.7.0'
    // --end

    // retrofit2 --start
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.squareup.retrofit2:retrofit:2.0.2'
    compile 'com.squareup.retrofit2:converter-gson:2.0.2'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.2'
    compile 'com.squareup.okhttp3:okhttp:3.0.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.0.1'
    // --end

    //数据库litepal --start
    compile 'org.litepal.android:core:1.2.0'
    // --end

    //图片加载glide --start
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'jp.wasabeef:glide-transformations:2.0.1'
    // --end

    //分包multidex -start
    compile 'com.android.support:multidex:1.0.1'
    // --end
}

def loadServerUrl() {
    return rootProject.ext.serverUrl
}
//task getGeTuiApp << 在右侧gradle里会出现getGeTuiApp的设置样式按钮，可换做方法
//task getGeTuiApp << {
//    //获取主工程下文件
//    File propFile = file(rootProject.getRootDir().getAbsolutePath() + "/getui.properties")
//    if (propFile.exists()) {
//        def Properties props = new Properties()
//        props.load(new FileInputStream(propFile))
//        props['GETUI'] = "GETUI_APP_ID"
//        propFile.setWritable(true)
//        props.store(new FileOutputStream(propFile), "")
//        println props['GETUI']
//    } else {
//        println "No File"
//    }
//}

def getGeTuiApp() {
    //获取主工程下文件
    File propFile = file(rootProject.getRootDir().getAbsolutePath() + "/getui.properties")
    if (propFile.exists()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        props['GETUI'] = "GETUI_APP_ID"
        propFile.setWritable(true)
        props.store(new FileOutputStream(propFile), "")
        println props['GETUI']
        return props['GETUI']
    } else {
        println "No File"
        return "No File"
    }
}

ext {
    bintrayRepo = 'happy'
    bintrayName = 'commonlibrary'

    publishedGroupId = 'com.simple.happy'
    libraryName = 'commonlibrary'
    artifact = 'commonlibrary'

    libraryDescription = 'test'

    siteUrl = 'https://github.com/simplehych/HappilyEverAfter'
    gitUrl = 'https://github.com/simplehych/HappilyEverAfter.git'

    libraryVersion = '1.0.0'

    developerId = 'simple'
    developerName = 'simplehych'
    developerEmail = 'simplehych@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}
//apply plugin: 'com.github.dcendents.android-maven'
apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'


//version = "1.0.0"    //这个是版本号，必须填写
//def siteUrl = 'https://github.com/simplehych/HappilyEverAfter' // 项目的主页
//def gitUrl = 'https://github.com/simplehych/HappilyEverAfter' // Git仓库的
//urlgroup = "com.simple.happilyeverafter" // 这里是groupId ,必须填写  一般填你唯一的包名
//
//install {
//    repositories.mavenInstaller {
//        // This generates POM.xml with proper parameters
//        pom {
//            project {
//                packaging 'aar'         // 项目描述，复制我的话，这里需要修改。
//                name 'a view with the lunar calendar'   //项目描述
//                url siteUrl           // 软件开源协议，现在一般都是Apache License2.0吧，复制我的，这里不需要修改。
//                licenses {
//                    license {
//                        name 'The Apache Software License, Version 2.0'
//                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                    }
//                }
//                //填写开发者基本信息，复制我的，这里需要修改。
//                developers {
//                    developer {
//                        id 'simple'            //你公司的id
//                        name 'simplehych'      //你的用户名
//                        email 'simplehych@gmail.com' // 你的邮箱
//                    }
//                }
//                // SCM，复制我的，这里不需要修改。
//                scm {
//                    connection gitUrl
//                    developerConnection gitUrl
//                    url siteUrl
//                }
//            }
//        }
//    }
//}
//
//// 生成jar包的task，不需要修改。
//task sourcesJar(type: Jar) {
//    from android.sourceSets.main.java.srcDirs
//    classifier = 'sources'
//}
//
//// 生成javaDoc的jar，不需要修改
//task javadoc(type: Javadoc) {
//    options.encoding = "UTF-8"
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}
////下面设置编码格式，重点注意，如果不设置可能会在gradlew install的时候出现GBK编码映射错误javadoc {
//options {
//    encoding "UTF-8"
//    charSet 'UTF-8'
//    author true
//    version true
//    links "http://docs.oracle.com/javase/7/docs/api"
//    title 'A CalendarView Support Lunar Calendar For Android'   // 文档标题
//}
//
//
//artifacts {//    archives javadocJar    archives sourcesJar
//}
//
//// 生成jar包task
//releaseJar(type: Copy) {
//    from('build/intermediates/bundles/release')
//    into('../jar')
//    include('classes.jar')
//    rename('classes.jar', 'okgo-' + version + '.jar')
//}
//// 这里是读取Bintray相关的信息，我们上传项目到github上的时候会把gradle文件传上去，
//// 所以不要把帐号密码的信息直接写在这里，写在local.properties中，这里动态读取。
//Properties properties = new Properties()
//properties.load(project.rootProject.file('local.properties').newDataInputStream())
//bintray {
//    //读取 local.properties 文件里面的 bintray.user
//    user = properties.getProperty("bintray.user")
//    //读取 local.properties 文件里面的 bintray.apikey
//    key = properties.getProperty("bintray.apikey")
//    configurations = ['archives']
//    pkg {
//        userOrg = "simple"        //发布到JCenter的组织，注意新版本的bintray是需要手动创建的
//        repo = "happy"
//        //发布到JCenter上的仓库名称，注意新版本的bintray是需要手动创建的        // 发布到Bintray上的项目名字
//        name = "commonlibrary"
//        websiteUrl = siteUrl
//        vcsUrl = gitUrl
//        licenses = ["Apache-2.0"]
//        publish = true  // 是否是公开项目
//    }
//}
//
