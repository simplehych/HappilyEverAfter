apply plugin: 'com.android.library'
//apply plugin: 'com.jakewharton.butterknife'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }
    buildTypes {//Library没有debug和release区分，运行之后都按Release
        debug {
            getGeTuiApp()
            buildConfigField "String", "SERVER_URL", "\"${loadServerUrl()}\""
        }
        release {
            getGeTuiApp()
            buildConfigField "String", "SERVER_URL", "\"${loadServerUrl()}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'

    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.supportLibraryVersion"
    compile "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"

    //ARouter --start
    compile "com.alibaba:arouter-api:$rootProject.ARouterApi"
    annotationProcessor "com.alibaba:arouter-compiler:$rootProject.ARouterCompiler"
    //--end

    //fragmentation --start
    compile "me.yokeyword:fragmentation:$rootProject.fragmentation"
    // 如果想使用SwipeBack 滑动边缘退出Fragment/Activity功能，请再添加下面的库
    compile "me.yokeyword:fragmentation-swipeback:$rootProject.fragmentationSwipeback"
    //--end

    // butterknife --start
    compile "com.jakewharton:butterknife:$rootProject.butterKnifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterKnifeCompiler"
    // --end

    // rxjava --start
    compile 'io.reactivex:rxjava:1.1.0'
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'com.tbruyelle.rxpermissions:rxpermissions:0.7.0@aar'
    compile 'com.trello:rxlifecycle:0.7.0'
    compile 'com.trello:rxlifecycle-android:0.7.0'
    compile 'com.trello:rxlifecycle-components:0.7.0'
    // --end

    // retrofit2 --start
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.squareup.retrofit2:retrofit:2.0.2'
    compile 'com.squareup.retrofit2:converter-gson:2.0.2'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.2'
    compile 'com.squareup.okhttp3:okhttp:3.0.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.0.1'
    // --end

    //数据库litepal --start
    compile 'org.litepal.android:core:1.2.0'
    // --end

    //图片加载glide --start
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'jp.wasabeef:glide-transformations:2.0.1'
    // --end

    //分包multidex -start
    compile 'com.android.support:multidex:1.0.1'
    // --end
}

def loadServerUrl() {
    return rootProject.ext.serverUrl
}
//task getGeTuiApp << 在右侧gradle里会出现getGeTuiApp的设置样式按钮，可换做方法
task getGeTuiApp << {
    //获取主工程下文件
    File propFile = file(rootProject.getRootDir().getAbsolutePath() + "/getui.properties")
    if (propFile.exists()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        props['GETUI'] = "GETUI_APP_ID"
        propFile.setWritable(true)
        props.store(new FileOutputStream(propFile), "")
        println props['GETUI']
    } else {
        println "No File"
    }
}

def getGeTuiApp() {
    //获取主工程下文件
    File propFile = file(rootProject.getRootDir().getAbsolutePath() + "/getui.properties")
    if (propFile.exists()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        props['GETUI'] = "GETUI_APP_ID"
        propFile.setWritable(true)
        props.store(new FileOutputStream(propFile), "")
        println props['GETUI']
        return props['GETUI']
    } else {
        println "No File"
        return "No File"
    }
}

