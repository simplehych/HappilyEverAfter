if (isModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'com.jakewharton.butterknife'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }
    buildTypes {
        //library下的gradle没有debug模式，所以只可以在Release下进行配置，但是组件化开发时切换为Module的时候还是需要进行同样的配置
        debug {
            buildConfigField "String", "USER_CENTER_URL", "\"${getUserCenterUrl()}\""
        }
        release {
            buildConfigField "String", "USER_CENTER_URL", "\"${getUserCenterUrl()}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            if (isModule.toBoolean()) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/release/AndroidManifest.xml'
                //release模式下排除debug文件夹中的所有Java文件
                java {
                    exclude 'debug/**'
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"

    // butterknife --start
    compile "com.jakewharton:butterknife:$rootProject.butterKnifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterKnifeAnnotationVersion"
    // --end

    //ARouter --start
    compile "com.alibaba:arouter-api:$rootProject.ARouterApi"
    annotationProcessor "com.alibaba:arouter-compiler:$rootProject.ARouterCompiler"
    //--end
}

def getUserCenterUrl() {
    return rootProject.ext.userCenterUrl
}
