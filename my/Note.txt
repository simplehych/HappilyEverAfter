

1、使用Retrofit，retrofit.create(service)方法内部使用反射invoke()的方法，效率问题？
是将Service接口中全部的方法执行映射进行遍历，慢，体验差。
验证完毕，使用哪个方法才进行反射，而不是将所有的方法全部反射。

2、路由模式进行模块化，所有模块暴露的方法在主工程内进行统一管理配置，例如写在文件下或一个类中

3、将Retrofit的Api提取到BaseLibrary里，URL在主工程的某处统一配置，进一步封装，
之前的网络地址在Build.config下，封装对用户使用力求简洁明了

4、Mvp模式的理解，进行解耦；
	Mvp的问题：需要创建太多的类和接口，并且每次通信都需要繁琐的通过接口传递。
	解决(缓解)方案：https://juejin.im/post/58b25e588d6d810057ed3659
		硬解决：通过Template自动生成类和接口，这样少去了频繁的复制粘贴
		软解决：1 Presenter中如果不需要处理数据，也可以不使用Model
				2 Mvp划分可以粒度稍微粗一点，即可以几个View共用一套Mvp
	个人认为的优势：统一规范
	
网上查看，retrofit的使用 接口，程序的扩展性、解耦、复用 泛型查看

Dagger不支持循环依赖，及依赖关系图中不能出现环。原因很简单，
如果鸡依赖蛋，蛋依赖鸡，谁来创造世界？总有一个先产生的。

1、保存公共Library
2、RxBus通信

随笔记：
1 transaction.addToBackStack(this);类似回退栈，其实是ArrayList
添加之后点击返回可以回到之前的Fragment
http://blog.csdn.net/wenxuzl99/article/details/16112725/

2 注解是为编译时检查服务用的，不用影响程序运行，后来人们利用反射解析注解，
干涉程序的运行，大量的反射，影响性能。
	后来java1.6出现注解处理器，annotation processor tool简称apt
http://blog.csdn.net/a153614131/article/details/53248571

3 反射给java提供了，运行时获取一个类实例的可能，这一点非常灵活
			// 1,获取字节码文件  
			Class<?> clazz = Class.forName("com.example.reflecr.Reflex");  
            // 2,获取方法  
            Method method = clazz.getMethod("getReflex");  
            //3，创建对应字节码类的实例对象  
            Reflex reflex = (Reflex) clazz.newInstance();  
            //4，调用方法，拿到返回的string"测试"  
            String value = (String) method.invoke(reflex); 

			package com.example.reflecr;  
			  
			  
			import android.app.Activity;  
			import android.util.Log;  
			  
			public class Reflex extends Activity {  
				private static String getReflex() {  
					Log.i("TAG", "进来了反射");  
					String reflexResult ="测试";
					return reflexResult;  
			}  	

4 映射文件
分组管理，按需加载策略
https://yq.aliyun.com/articles/71687?t=t1

5 Charsequence,String,StringBuffer,StringBuilder
    Charsequence,接口 表示字符串序列，有序的字符串序列集合
    String,常量 不可变
    StringBuffer,可变常量字符串 线程安全
    StringBuilder,可变常量字符串 非线程安全
		
6 一个子view只能有一个父view，不能被同时添加到俩个父view中
	eg：View v = new View();
		ViewGroup vg1 = new ViewGroup();
		ViewGroup vg1 = new ViewGroup();
		vg1.addView(v);
		vg2.addView(v);
	以上错误，提示已经有父控件
	
7 HorizontalScrollView包含LinearLayout设置权重失效