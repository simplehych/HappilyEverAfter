摘自[https://yq.aliyun.com/articles/73518?spm=5176.100240.searchblog.24.PWxtEr]
一 编码习惯
	1 尽量避免分配内存
		a 避免创建一个短生命周期的临时对象（不是随便使用匿名对象）
			如果一个方法返回一个String，并且这个方法的返回值始终都是被用来appen到一个StringBuffer上
			就改为传入StringBuffer直接append上去
		b 如果使用的字符串是截取自某一个字符串，就直接从那个字符串上面substring，不要拷贝一份，
			因为通过substring虽然创建了新的String对象，但是共享了里面的char数组中的char对象，
			减少了这块对象的创建；
		c 尽量使用多个一维数组，其性能高于多维数组；int数组性能远大于Integer的性能
	
	2 尽可能使用static方法
		如果确定不需要访问类成员，让方法static，这样调用时可以提升15%~20%的速度，因为不需要切换对象的状态
	
	3 尽可能使用常量而非变量
		如果某个参数是常量，别忘了使用static final，这样可以让Class首次初始化时，
		不需要调用<clinit>来创建static方法，而是在编译时就直接将常量替换代码中使用的位置
	
	4 从性能层面出发，尽可能直接访问变量而非方法
		即时编译(Just-in-time Compilation，JIT)，又称动态转译(Dynamic Translation)，是一种通过在运行时将字节码翻译为机器码，从而改善字节码编译语言性能的技术。即时编译前期的两个运行时理论是字节码编译和动态编译。
		Android开发中，类内尽量避免通过get/set访问成员变量，虽然这在语言的开发中是一个好的习惯
		但是Android虚拟机中，对方法的调用开销远大于对变量的直接访问。在没有JIT的情况下，直接的
		变量访问比调用方法快3倍，在JIT下，直接的变量访问更是比调用方法快7倍
	
	5 对被内部类调用的方法/变量改为包可见
		当内部类需要访问外部类的私有方法/变量时，考虑将这些外部类的私有方法/变量改为包可见的方式。
		首先在编写代码的时候，通过内部类访问外部类的私有方法/变量时合法的，但是在编译的时候为了满足
		这个会将需要被被内部类访问的私有方法/变量封装一层包可见的方法，实现让内部类访问这些私有的方法/变量，
		根据前面我们又提到说方法的调用开销远大于变量的调用，因此这样使用性能变差。
	
	6 少用float
		
		a 尽量少用float，在很多现在设备中，double的性能与float的性能几乎没有差别，
			但是从大小上面double是float的俩倍的大小
		b 尽量考虑使用整形而非浮点型，在较好的Android设备中，浮点型比整形慢一倍
		
	7 使用乘法代替除法
		尽量不要使用除法操作，有很多处理器有乘法器，但是没有除法器，也就是说这些设备中需要将除法分解成其他的计算方式速度会比较慢
	
	8 使用内部实现，而非上层实现
		尽量使用系统Sdk提供的方法，而非自己去实现。如String.indexOf()相关的API，Dalvik将会替换为内部方法；
		System.arraycopy()方法在Nexus One手机上，会比我们上层写的类似方法的执行速度快9倍。
	
	9 权衡面向接口编程
		在没有JIT的设备中，面向接口编程的模式（如Map map），相比直接访问对象类（如HashMap map），会慢6%，
		但是存在JIT的设备中，二者的速度差不多，但是内存方面面向接口会变成消耗更多的内存，因此如果你的面向接口编程不是十分的必须可以考虑不用
		
	10 重复访问的变量，赋值为本地变量
		在没有JIT的设备中，访问本地化变量与成员比那两会快20%，但是存在JIT的设备中，二者速度差不多
	
	11 遍历优化
		尽量使用Iterable而不是通过长度判断来进行遍历
		list l = new ArrayList();
		Iterator iter = l.iterator();
		while(iter.hasNext()){
			String str = (String) iter.next();
			System.out.println(str);
	   }

二 数据库相关
	
	建多索引的原则：哪个字段可以最快的减少查询结果，就把该字段放在最前面
	
	1 无法使用索引的情况
		a 操作符BETWEEN、LIKE、OR
		b 表达式
		c CASE WHEN
	
	2 不推荐
		a 不要涉及索引是其他索引的前缀（没有意义）
		b 更新时拒绝直接全量更新，要更新哪列就put哪列的数据
		c 如果最频繁的是更新与插入，别建很多索引（原本表舅很小就饿没有必要建）
		d 拒绝用大字符串创建索引
		e 避免建太多索引，查询时可能就不会选择最好的来执行
		
	3 推荐
		a 多使用整形索引，效率远高于字符串索引
		b 搜索时使用SQL参数（?,parameter）代替字符串拼接（底层有特殊优化和缓存）
		c 查询需要多少就limit多少（如判断是否含有啥，就limit就行了）
		d 如果出现很宽的列（如blob类型），考虑在单独的表中（在查询或者更新其他列数据时防止不必要的大数据io应县性能）

三 网络调优

四 策略层面的优化
	
	